<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="com.wxweven"></context:component-scan>

	<!-- 配置视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- 配置视图 BeanNameViewResolver 解析器: 使用视图的名字来解析视图 -->
	<!-- 通过 order 属性来定义视图解析器的优先级, order 值越小优先级越高 -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="100"></property>
	</bean>

	<!-- 配置静态资源(js, css等)加载的servlet default-servlet-handler 将在 SpringMVC 上下文中定义一个 
		DefaultServletHttpRequestHandler, 它会对进入 DispatcherServlet 的请求进行筛查, 如果发现是没有经过映射的请求, 
		就将该请求交由 WEB 应用服务器默认的 Servlet 处理. 如果不是静态资源的请求，才由 DispatcherServlet 继续处理 一般 
		WEB 应用服务器默认的 Servlet 的名称都是 default. 若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 
		default-servlet-name 属性显式指定 -->
	<mvc:default-servlet-handler />

	<mvc:annotation-driven />

	<!-- <mvc:interceptors> 配置自定义的拦截器 <bean class="com.atguigu.springmvc.interceptors.FirstInterceptor"></bean> 
		配置拦截器(不)作用的路径 <mvc:interceptor> <mvc:mapping path="/emps"/> <bean class="com.atguigu.springmvc.interceptors.SecondInterceptor"></bean> 
		</mvc:interceptor> 配置 LocaleChanceInterceptor <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean> 
		</mvc:interceptors> -->

	<!-- <mvc:view-controller path="/i18n" view-name="i18n"/> -->
	<mvc:view-controller path="/i18n2" view-name="i18n2" />

	<!-- 配置 MultipartResolver，文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="1024000"></property>
	</bean>

	<!-- 配置使用 SimpleMappingExceptionResolver 来映射异常 -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionAttribute" value="ex"></property>
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
			</props>
		</property>
	</bean>

	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<!-- <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> 
		<property name="supportedMediaTypes"> <list> <value>text/html;charset=UTF-8</value> 
		</list> </property> </bean> -->

	
</beans>
